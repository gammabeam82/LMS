imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# http://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: ru
    library: "%kernel.root_dir%/../var/books"
    export: "%kernel.root_dir%/../var/export"
    session_archive_var: "archive"
    password: "%testuser_password%"
    admin_email: "qqq@uoiuo9879ijasghjas.com"

framework:
    #esi:             ~
    translator:      { fallbacks: ["%locale%"] }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    #serializer:      { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale:  "%locale%"
    trusted_hosts:   ~
    session:
        # http://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        #handler_id:  session.handler.native_file
        #save_path:   "%kernel.root_dir%/../var/sessions/%kernel.environment%"
        handler_id: snc_redis.session.handler
    fragments:       ~
    http_method_override: true
    assets: ~
    php_errors:
        log: true


# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"

# Doctrine Configuration
doctrine:
    dbal:
        driver:   "%database_driver%"
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.root_dir%/data/data.db3"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #     path:     "%database_path%"

    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true
        filters:
            softdeleteable:
              class: Gedmo\SoftDeleteable\Filter\SoftDeleteableFilter
              enabled: true


# Swiftmailer Configuration
swiftmailer:
    default_mailer: default
    mailers:
        default:
            transport: "%mailer_transport%"
            host:      "%mailer_host%"
            username:  "%mailer_user%"
            password:  "%mailer_password%"
            port:      "%mailer_port%"
            encryption: "%mailer_encryption%"
            auth_mode: "%mailer_auth_mode%"
            spool:     { type: memory }
        rabbitmq:
             transport: "%mailer_transport%"
             host:      "%mailer_host%"
             username:  "%mailer_user%"
             password:  "%mailer_password%"
             port:      "%mailer_port%"
             encryption: "%mailer_encryption%"
             auth_mode: "%mailer_auth_mode%"


fos_user:
    db_driver: orm # other valid values are 'mongodb' and 'couchdb'
    firewall_name: main
    user_class: AppBundle\Entity\User
    from_email:
      address: noreply@test.test
      sender_name: registration

knp_paginator:
    page_range: 5                      # default page range used in pagination control
    default_options:
        page_name: page                # page query parameter name
        sort_field_name: sort          # sort field query parameter name
        sort_direction_name: direction # sort direction query parameter name
        distinct: true                 # ensure distinct results, useful when ORM queries are using GROUP BY statements
    template:
        pagination: KnpPaginatorBundle:Pagination:twitter_bootstrap_v3_pagination.html.twig
        sortable: KnpPaginatorBundle:Pagination:sortable_link.html.twig # sort link template

doctrine_migrations:
    dir_name: "%kernel.root_dir%/DoctrineMigrations"
    namespace: Application\Migrations
    table_name: migration_versions
    name: Application Migrations

stof_doctrine_extensions:
    default_locale: "%locale%"
    orm:
        default:
            timestampable: true
            softdeleteable: true

ruvents_doctrine_fixes:
    default:
        schema_namespace_fix:
            namespace: 'public'

snc_redis:
    clients:
        default:
            type: predis
            alias: default
            dsn: redis://localhost
            logging: "%kernel.debug%"
        session:
            type: predis
            alias: session
            dsn: redis://localhost/2
        cache:
            type: predis
            alias: cache
            dsn: redis://localhost/3

    session:
        client: session

monolog:
    channels: [library]
    handlers:
        security:
            level:    debug
            type:     stream
            path:     '%kernel.logs_dir%/security.log'
            channels: [security]
        library:
            level:    info
            type:     stream
            path:     '%kernel.logs_dir%/library.log'
            channels: [library]

lexik_jwt_authentication:
    secret_key: '%jwt_private_key_path%'
    public_key:  '%jwt_public_key_path%'
    pass_phrase:      '%jwt_key_pass_phrase%'
    token_ttl:        '%jwt_token_ttl%'

nelmio_cors:
    defaults:
        allow_credentials: false
        allow_origin: ['*']
        allow_headers: ['*']
        allow_methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS']
        max_age: 3600
        hosts: []
        origin_regex: false

old_sound_rabbit_mq:
    connections:
        default:
            host: 'localhost'
            port: 5672
            user: '%rabbitmq_user%'
            password: '%rabbitmq_password%'
            vhost: '/'
            lazy: false
            connection_timeout: 3
            read_write_timeout: 3
            keepalive: false
            heartbeat: 0
            use_socket: false

    producers:
        send_email:
            connection:       default
            exchange_options: { name: 'notification.subscription', type: direct }

    consumers:
        send_email:
            connection:       default
            exchange_options: { name: 'notification.subscription', type: direct }
            queue_options:    { name: 'notification.subscription' }
            callback:         app.consumer.mail
